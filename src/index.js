'use strict'

const AWS = require('aws-sdk')

class ServerlessSharedapiGateway {
  constructor (serverless, options) {
    this.serverless = serverless
    this.options = options

    this.apiGateway = new AWS.APIGateway()
    this.restApiId = null
    this.restApiName = null
    this.restApiResourceId = null

    this.commands = {
      shared_api_gateway: {
        validate: {
          usage: 'Checks to see if the AWS API gateway exists and if you have permission',
          lifecycleEvents: [
            'validate'
          ]
        },
        create: {
          usage: 'Creates an AWS API gateway',
          lifecycleEvents: [
            'initialize',
            'create'
          ]
        },
        delete: {
          usage: 'Deletes an AWS API gateway',
          lifecycleEvents: [
            'initialize',
            'delete'
          ]
        }
      }
    }

    this.hooks = {
      'shared_api_gateway:delete:delete': this.deleteRestApi.bind(this),
      'shared_api_gateway:create:create': this.createRestApi.bind(this),
      'after:package:compileEvents': this.compileEvents.bind(this)
    }
  }

  createRestApi () {
    return this.apiGateway.createRestApi({
      name: this.restApiName,
      // binaryMediaTypes: [],
      description: 'Generated by the shared Serverless - AWS Api Gateway plugin',
      endpointConfiguration: {
        types: [
          'EDGE'
        ]
      }
    }).promise()
  }

  deleteRestApi () {
    return null
  }

  _sourceArnReplaceRestApi (arr) {
    return arr.map(item => {
      if (item && item.Ref && item.Ref === this.serverless.apiGatewayRestApiLogicalId) item.Ref = this.restApiId
      else if (item && item['Fn::GetAtt']) return this.restApiResourceId
      return item
    })
  }

  _processCloudFormation () {
    // Set restApiId on provider
    this.serverless.service.provider.apiGatewayRestApiId = this.restApiId

    // Set restApiResourceId on provider
    this.serverless.service.provider.restApiResourceId = this.restApiResourceId

    let ccfTemplate = this.serverless.service.provider.compiledCloudFormationTemplate
    let Resources = ccfTemplate.Resources

    const resourceKeys = Object.keys(Resources)
    resourceKeys.forEach(key => {
      if (/^apiGateway(Resource|Method|Deployment)/.test(key)) {
        let Properties = Resources[key].Properties
        // Set restApiId on each Resource, Method, & Deployment
        if (Properties && Properties.RestApiId && Properties.RestApiId.Ref && Properties.RestApiId.Ref === 'ApiGatewayRestApi') Properties.RestApiId = this.restApiId
        // Set restApiResourceId as ParentId
        if (Properties && Properties.ParentId && Properties.ParentId.Ref && Properties.ParentId['Fn::GetAtt']) Properties.ParentId = this.restApiResourceId
      } else if (/^(RegisterLambdaPermissionapiGateway|GetLambdaPermissionapiGateway)/.test(key)) {
        Resources[key].Properties.SourceArn['Fn::Join'] = this._sourceArnReplaceRestApi(Resources[key].Properties.SourceArn['Fn::Join'])
      }
    })

    // Set restApiId on Outputs
    ccfTemplate.Outputs.ServiceEndpoint.Value['Fn::Join'] = this._sourceArnReplaceRestApi(ccfTemplate.Outputs.ServiceEndpoint.Value['Fn::Join'])
  }

  compileEvents () {
    return this.findRestApi()
      .then(restApi => {
        this.restApiId = restApi
        this._processCloudFormation()
      })
  }

  _findMatchingRestApi (api) {
    if (this.restApiId) return api.id === this.restApiId
    if (this.restApiName) return api.name === this.restApiName
    return false
  }

  findRestApi () {
    const getRestApis = this.apiGateway.getRestApis({}).promise()
    getRestApis.then((data) => {
      if (this.restApiName) {
        let matchingApis = data.filter(api => this._findMatchingRestApi(api))
        if (matchingApis && matchingApis.length > 1) throw new Error(`Found multiple APIs with the name: ${this.restApiName}. Please rename your api or specify an apiGatewayRestApiId`)
      }

      let matchingApi = data.items.find(api => this._findMatchingRestApi(api))
      if (this.restApiName && !matchingApi) {
        console.log('Unable to find a matching API Gateway attempting to create one.')

        return this.createRestApi()
      }
      return matchingApi
    })
  }
}

module.exports = ServerlessSharedapiGateway
