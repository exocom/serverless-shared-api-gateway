'use strict'

const AWS = require('aws-sdk')

class ServerlessSharedApiGateway {
  constructor (serverless, options) {
    this.serverless = serverless
    this.options = options

    this.apiGateway = new AWS.APIGateway()
    this.restApiId = null
    this.restApiName = null

    this.commands = {
      shared_api_gateway: {
        validate: {
          usage: 'Checks to see if the AWS API gateway exists and if you have permission',
          lifecycleEvents: [
            'validate'
          ]
        },
        create: {
          usage: 'Creates an AWS API gateway',
          lifecycleEvents: [
            'initialize',
            'create'
          ]
        },
        delete: {
          usage: 'Deletes an AWS API gateway',
          lifecycleEvents: [
            'initialize',
            'delete'
          ]
        }
      }
    }
  }

  _findMatchingRestApi (api) {
    if (this.restApiId) return api.id === this.restApiId
    if (this.restApiName) return api.name === this.restApiName
    return false
  }

  findRestApi () {
    const getRestApis = this.apigateway.getRestApis({}).promise()
    getRestApis.then((data) => {
      if (this.restApiName) {
        let matchingApis = data.filter(api => this._findMatchingRestApi(api))
        if (matchingApis && matchingApis.length > 1) throw new Error(`Found multiple APIs with the name: ${this.restApiName}. Please rename your api or specify an apiGatewayRestApiId`)
      }

      let matchingApi = data.items.find(api => this._findMatchingRestApi(api))
      if (this.restApiName && !matchingApi) {
        console.log('Unable to find a matching API Gateway attempting to create one.')

        return this.apigateway.createRestApi({
          name: this.restApiName,
          // binaryMediaTypes: [],
          description: 'Generated by the shared Serverless - AWS Api Gateway plugin',
          endpointConfiguration: {
            types: [
              'EDGE'
            ]
          }
        }).promise()
      }
      return matchingApi
    })
  }
}

module.exports = ServerlessSharedApiGateway
